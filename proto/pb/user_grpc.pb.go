// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUpdatedUsers(ctx context.Context, in *UpdatedUsersRequest, opts ...grpc.CallOption) (UserService_GetUpdatedUsersClient, error)
	GetUpdatedUsersSince(ctx context.Context, in *UpdatedUsersRequest, opts ...grpc.CallOption) (*UpdatedUsersResponse, error)
	GetUserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
	GetUserSocials(ctx context.Context, in *UserSocialsRequest, opts ...grpc.CallOption) (*UserSocialsResponse, error)
	GetUserLinkedAccounts(ctx context.Context, in *UserLinkedAccountsRequest, opts ...grpc.CallOption) (*UserLinkedAccountsResponse, error)
	GetUserChainAccount(ctx context.Context, in *UserChainAccountRequest, opts ...grpc.CallOption) (*UserChainAccountResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUpdatedUsers(ctx context.Context, in *UpdatedUsersRequest, opts ...grpc.CallOption) (UserService_GetUpdatedUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], "/users.UserService/GetUpdatedUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUpdatedUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetUpdatedUsersClient interface {
	Recv() (*UpdatedUser, error)
	grpc.ClientStream
}

type userServiceGetUpdatedUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceGetUpdatedUsersClient) Recv() (*UpdatedUser, error) {
	m := new(UpdatedUser)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) GetUpdatedUsersSince(ctx context.Context, in *UpdatedUsersRequest, opts ...grpc.CallOption) (*UpdatedUsersResponse, error) {
	out := new(UpdatedUsersResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/GetUpdatedUsersSince", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/GetUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserSocials(ctx context.Context, in *UserSocialsRequest, opts ...grpc.CallOption) (*UserSocialsResponse, error) {
	out := new(UserSocialsResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/GetUserSocials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserLinkedAccounts(ctx context.Context, in *UserLinkedAccountsRequest, opts ...grpc.CallOption) (*UserLinkedAccountsResponse, error) {
	out := new(UserLinkedAccountsResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/GetUserLinkedAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserChainAccount(ctx context.Context, in *UserChainAccountRequest, opts ...grpc.CallOption) (*UserChainAccountResponse, error) {
	out := new(UserChainAccountResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/GetUserChainAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetUpdatedUsers(*UpdatedUsersRequest, UserService_GetUpdatedUsersServer) error
	GetUpdatedUsersSince(context.Context, *UpdatedUsersRequest) (*UpdatedUsersResponse, error)
	GetUserProfile(context.Context, *UserProfileRequest) (*UserProfileResponse, error)
	GetUserSocials(context.Context, *UserSocialsRequest) (*UserSocialsResponse, error)
	GetUserLinkedAccounts(context.Context, *UserLinkedAccountsRequest) (*UserLinkedAccountsResponse, error)
	GetUserChainAccount(context.Context, *UserChainAccountRequest) (*UserChainAccountResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetUpdatedUsers(*UpdatedUsersRequest, UserService_GetUpdatedUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUpdatedUsers not implemented")
}
func (UnimplementedUserServiceServer) GetUpdatedUsersSince(context.Context, *UpdatedUsersRequest) (*UpdatedUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdatedUsersSince not implemented")
}
func (UnimplementedUserServiceServer) GetUserProfile(context.Context, *UserProfileRequest) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedUserServiceServer) GetUserSocials(context.Context, *UserSocialsRequest) (*UserSocialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSocials not implemented")
}
func (UnimplementedUserServiceServer) GetUserLinkedAccounts(context.Context, *UserLinkedAccountsRequest) (*UserLinkedAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLinkedAccounts not implemented")
}
func (UnimplementedUserServiceServer) GetUserChainAccount(context.Context, *UserChainAccountRequest) (*UserChainAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChainAccount not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUpdatedUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdatedUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetUpdatedUsers(m, &userServiceGetUpdatedUsersServer{stream})
}

type UserService_GetUpdatedUsersServer interface {
	Send(*UpdatedUser) error
	grpc.ServerStream
}

type userServiceGetUpdatedUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceGetUpdatedUsersServer) Send(m *UpdatedUser) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_GetUpdatedUsersSince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUpdatedUsersSince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetUpdatedUsersSince",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUpdatedUsersSince(ctx, req.(*UpdatedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserProfile(ctx, req.(*UserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserSocials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSocialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserSocials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetUserSocials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserSocials(ctx, req.(*UserSocialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserLinkedAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLinkedAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserLinkedAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetUserLinkedAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserLinkedAccounts(ctx, req.(*UserLinkedAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserChainAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChainAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserChainAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetUserChainAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserChainAccount(ctx, req.(*UserChainAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUpdatedUsersSince",
			Handler:    _UserService_GetUpdatedUsersSince_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _UserService_GetUserProfile_Handler,
		},
		{
			MethodName: "GetUserSocials",
			Handler:    _UserService_GetUserSocials_Handler,
		},
		{
			MethodName: "GetUserLinkedAccounts",
			Handler:    _UserService_GetUserLinkedAccounts_Handler,
		},
		{
			MethodName: "GetUserChainAccount",
			Handler:    _UserService_GetUserChainAccount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUpdatedUsers",
			Handler:       _UserService_GetUpdatedUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user.proto",
}
