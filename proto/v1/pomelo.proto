syntax = "proto3";
package eosn.protobuf.v1;
option go_package = "./pb";

import "common.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";


enum TraidingPairId {
  EOSUSDPAIR = 0;
}



// Models

message TraidingPair {
  Transaction transaction = 1;
  TraidingPairId id = 2;
  float rate = 3;
  google.protobuf.Timestamp time = 4;
}

message Contribution {
  Transaction transaction = 1;
  UserData user_data = 2;
  GrantData grant_data = 3;
  RoundData round_data = 4;
  TransferData transfer_data = 5;
}

message UserData {
  string user_id = 1;                                 // the users eosn_id
  int32 round_id = 2;                                 // the id of the matching round this user data is valid for
  double value = 3;                                    // total value of the users donations within the matching round (in USD)
  double boost = 4;                                    // the total amount of boost of this user within the matching round
  double multiplier = 5;                               // the users multiplier based on verified socials
  repeated UserGrantContributions contributions = 6;  // the list of total contributions per grant within the matching round
  google.protobuf.Timestamp updated_at = 7;           // updated_at timestamp of the database table
}

message UserGrantContributions {
  string grant_id = 1;  // the grant id which received the contributions
  double value = 2;      // the total value of contributions this grant has received from the user in the matching round (in USD)
}

message GrantData {
  string grant_id = 1;                        // the grant id
  int32 round_id = 2;                         // the id of the matching round this grant data is valid for
  double square = 3;
  double sum_boost = 4;
  double sum_sqrt = 5;
  double sum_value = 6;
  int32 total_users = 7;
  google.protobuf.Timestamp updated_at = 8;   // updated_at timestamp of the database table
}

message RoundData {
  int32 round_id = 1;                         // the id of the matching round this grant data is valid for
  int32 season_id = 2;
  double sum_boost = 3;
  double sum_square = 4;
  double sum_value = 5;
  double match_value = 6;
  repeated string grant_ids = 7;
  repeated string user_ids = 8;
  repeated TokenData donated_tokens = 9;
  google.protobuf.Timestamp updated_at = 10;
  google.protobuf.Timestamp created_at = 11;
}

message TokenData {
  string quantity = 1;
  string contract = 2;
}

message TransferData {
  string project_id = 1;
  string project_type = 2;
  int32 round_id = 3;
  int32 season_id = 4;
  string from = 5;
  string to = 6;
  string memo = 7;
  string fee = 8;
  double value = 9;
  TokenData ext_quantity = 10;
  int32 transfer_id = 11;
  bytes trx_id = 12;
  string user_id = 13;
  google.protobuf.Timestamp created_at = 14;
}


// Requests

message GetLastTradingPairRequest {
  TraidingPairId id = 1;
}

// Responses

service PomeloInternalService {
  rpc GetLastTraidingPair(GetLastTradingPairRequest) returns (TraidingPair) {};
  rpc AddTraidingPair(TraidingPair) returns (google.protobuf.Empty) {};
  rpc AddContribution(Contribution) returns (google.protobuf.Empty) {};
}