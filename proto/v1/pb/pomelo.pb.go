// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.4
// source: pomelo.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TraidingPairId int32

const (
	TraidingPairId_EOSUSDPAIR TraidingPairId = 0
)

// Enum value maps for TraidingPairId.
var (
	TraidingPairId_name = map[int32]string{
		0: "EOSUSDPAIR",
	}
	TraidingPairId_value = map[string]int32{
		"EOSUSDPAIR": 0,
	}
)

func (x TraidingPairId) Enum() *TraidingPairId {
	p := new(TraidingPairId)
	*p = x
	return p
}

func (x TraidingPairId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraidingPairId) Descriptor() protoreflect.EnumDescriptor {
	return file_pomelo_proto_enumTypes[0].Descriptor()
}

func (TraidingPairId) Type() protoreflect.EnumType {
	return &file_pomelo_proto_enumTypes[0]
}

func (x TraidingPairId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TraidingPairId.Descriptor instead.
func (TraidingPairId) EnumDescriptor() ([]byte, []int) {
	return file_pomelo_proto_rawDescGZIP(), []int{0}
}

type TraidingPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *Transaction           `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Id          TraidingPairId         `protobuf:"varint,2,opt,name=id,proto3,enum=eosn.protobuf.v1.TraidingPairId" json:"id,omitempty"`
	Rate        float32                `protobuf:"fixed32,3,opt,name=rate,proto3" json:"rate,omitempty"`
	Time        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TraidingPair) Reset() {
	*x = TraidingPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pomelo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraidingPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraidingPair) ProtoMessage() {}

func (x *TraidingPair) ProtoReflect() protoreflect.Message {
	mi := &file_pomelo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraidingPair.ProtoReflect.Descriptor instead.
func (*TraidingPair) Descriptor() ([]byte, []int) {
	return file_pomelo_proto_rawDescGZIP(), []int{0}
}

func (x *TraidingPair) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TraidingPair) GetId() TraidingPairId {
	if x != nil {
		return x.Id
	}
	return TraidingPairId_EOSUSDPAIR
}

func (x *TraidingPair) GetRate() float32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *TraidingPair) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type Contribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction  *Transaction  `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	TransferData *TransferData `protobuf:"bytes,5,opt,name=transfer_data,json=transferData,proto3" json:"transfer_data,omitempty"`
}

func (x *Contribution) Reset() {
	*x = Contribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pomelo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contribution) ProtoMessage() {}

func (x *Contribution) ProtoReflect() protoreflect.Message {
	mi := &file_pomelo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contribution.ProtoReflect.Descriptor instead.
func (*Contribution) Descriptor() ([]byte, []int) {
	return file_pomelo_proto_rawDescGZIP(), []int{1}
}

func (x *Contribution) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *Contribution) GetTransferData() *TransferData {
	if x != nil {
		return x.TransferData
	}
	return nil
}

type MatchingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchingRoundId int32        `protobuf:"varint,1,opt,name=matching_round_id,json=matchingRoundId,proto3" json:"matching_round_id,omitempty"`
	UserData        *UserData    `protobuf:"bytes,2,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	GrantData       []*GrantData `protobuf:"bytes,3,rep,name=grant_data,json=grantData,proto3" json:"grant_data,omitempty"`
	RoundData       *RoundData   `protobuf:"bytes,4,opt,name=round_data,json=roundData,proto3" json:"round_data,omitempty"`
}

func (x *MatchingData) Reset() {
	*x = MatchingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pomelo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingData) ProtoMessage() {}

func (x *MatchingData) ProtoReflect() protoreflect.Message {
	mi := &file_pomelo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingData.ProtoReflect.Descriptor instead.
func (*MatchingData) Descriptor() ([]byte, []int) {
	return file_pomelo_proto_rawDescGZIP(), []int{2}
}

func (x *MatchingData) GetMatchingRoundId() int32 {
	if x != nil {
		return x.MatchingRoundId
	}
	return 0
}

func (x *MatchingData) GetUserData() *UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *MatchingData) GetGrantData() []*GrantData {
	if x != nil {
		return x.GrantData
	}
	return nil
}

func (x *MatchingData) GetRoundData() *RoundData {
	if x != nil {
		return x.RoundData
	}
	return nil
}

type UserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string                    `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // the users eosn_id
	RoundId       int32                     `protobuf:"varint,2,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`      // the id of the matching round this user data is valid for
	Value         float64                   `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`                        // total value of the users donations within the matching round (in USD)
	Boost         float64                   `protobuf:"fixed64,4,opt,name=boost,proto3" json:"boost,omitempty"`                        // the total amount of boost of this user within the matching round
	Multiplier    float64                   `protobuf:"fixed64,5,opt,name=multiplier,proto3" json:"multiplier,omitempty"`              // the users multiplier based on verified socials
	Contributions []*UserGrantContributions `protobuf:"bytes,6,rep,name=contributions,proto3" json:"contributions,omitempty"`          // the list of total contributions per grant within the matching round
	UpdatedAt     *timestamppb.Timestamp    `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // updated_at timestamp of the database table
}

func (x *UserData) Reset() {
	*x = UserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pomelo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserData) ProtoMessage() {}

func (x *UserData) ProtoReflect() protoreflect.Message {
	mi := &file_pomelo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserData.ProtoReflect.Descriptor instead.
func (*UserData) Descriptor() ([]byte, []int) {
	return file_pomelo_proto_rawDescGZIP(), []int{3}
}

func (x *UserData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserData) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *UserData) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UserData) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

func (x *UserData) GetMultiplier() float64 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *UserData) GetContributions() []*UserGrantContributions {
	if x != nil {
		return x.Contributions
	}
	return nil
}

func (x *UserData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UserGrantContributions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantId string  `protobuf:"bytes,1,opt,name=grant_id,json=grantId,proto3" json:"grant_id,omitempty"` // the grant id which received the contributions
	Value   float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`                  // the total value of contributions this grant has received from the user in the matching round (in USD)
}

func (x *UserGrantContributions) Reset() {
	*x = UserGrantContributions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pomelo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGrantContributions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGrantContributions) ProtoMessage() {}

func (x *UserGrantContributions) ProtoReflect() protoreflect.Message {
	mi := &file_pomelo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGrantContributions.ProtoReflect.Descriptor instead.
func (*UserGrantContributions) Descriptor() ([]byte, []int) {
	return file_pomelo_proto_rawDescGZIP(), []int{4}
}

func (x *UserGrantContributions) GetGrantId() string {
	if x != nil {
		return x.GrantId
	}
	return ""
}

func (x *UserGrantContributions) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GrantData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantId    string                 `protobuf:"bytes,1,opt,name=grant_id,json=grantId,proto3" json:"grant_id,omitempty"`  // the grant id
	RoundId    int32                  `protobuf:"varint,2,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"` // the id of the matching round this grant data is valid for
	Square     float64                `protobuf:"fixed64,3,opt,name=square,proto3" json:"square,omitempty"`
	SumBoost   float64                `protobuf:"fixed64,4,opt,name=sum_boost,json=sumBoost,proto3" json:"sum_boost,omitempty"`
	SumSqrt    float64                `protobuf:"fixed64,5,opt,name=sum_sqrt,json=sumSqrt,proto3" json:"sum_sqrt,omitempty"`
	SumValue   float64                `protobuf:"fixed64,6,opt,name=sum_value,json=sumValue,proto3" json:"sum_value,omitempty"`
	TotalUsers int32                  `protobuf:"varint,7,opt,name=total_users,json=totalUsers,proto3" json:"total_users,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // updated_at timestamp of the database table
}

func (x *GrantData) Reset() {
	*x = GrantData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pomelo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantData) ProtoMessage() {}

func (x *GrantData) ProtoReflect() protoreflect.Message {
	mi := &file_pomelo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantData.ProtoReflect.Descriptor instead.
func (*GrantData) Descriptor() ([]byte, []int) {
	return file_pomelo_proto_rawDescGZIP(), []int{5}
}

func (x *GrantData) GetGrantId() string {
	if x != nil {
		return x.GrantId
	}
	return ""
}

func (x *GrantData) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *GrantData) GetSquare() float64 {
	if x != nil {
		return x.Square
	}
	return 0
}

func (x *GrantData) GetSumBoost() float64 {
	if x != nil {
		return x.SumBoost
	}
	return 0
}

func (x *GrantData) GetSumSqrt() float64 {
	if x != nil {
		return x.SumSqrt
	}
	return 0
}

func (x *GrantData) GetSumValue() float64 {
	if x != nil {
		return x.SumValue
	}
	return 0
}

func (x *GrantData) GetTotalUsers() int32 {
	if x != nil {
		return x.TotalUsers
	}
	return 0
}

func (x *GrantData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type RoundData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId       int32                  `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"` // the id of the matching round this grant data is valid for
	SeasonId      int32                  `protobuf:"varint,2,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	SumBoost      float64                `protobuf:"fixed64,3,opt,name=sum_boost,json=sumBoost,proto3" json:"sum_boost,omitempty"`
	SumSquare     float64                `protobuf:"fixed64,4,opt,name=sum_square,json=sumSquare,proto3" json:"sum_square,omitempty"`
	SumValue      float64                `protobuf:"fixed64,5,opt,name=sum_value,json=sumValue,proto3" json:"sum_value,omitempty"`
	MatchValue    float64                `protobuf:"fixed64,6,opt,name=match_value,json=matchValue,proto3" json:"match_value,omitempty"`
	GrantIds      []string               `protobuf:"bytes,7,rep,name=grant_ids,json=grantIds,proto3" json:"grant_ids,omitempty"`
	UserIds       []string               `protobuf:"bytes,8,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	DonatedTokens []*TokenData           `protobuf:"bytes,9,rep,name=donated_tokens,json=donatedTokens,proto3" json:"donated_tokens,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *RoundData) Reset() {
	*x = RoundData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pomelo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundData) ProtoMessage() {}

func (x *RoundData) ProtoReflect() protoreflect.Message {
	mi := &file_pomelo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundData.ProtoReflect.Descriptor instead.
func (*RoundData) Descriptor() ([]byte, []int) {
	return file_pomelo_proto_rawDescGZIP(), []int{6}
}

func (x *RoundData) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *RoundData) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *RoundData) GetSumBoost() float64 {
	if x != nil {
		return x.SumBoost
	}
	return 0
}

func (x *RoundData) GetSumSquare() float64 {
	if x != nil {
		return x.SumSquare
	}
	return 0
}

func (x *RoundData) GetSumValue() float64 {
	if x != nil {
		return x.SumValue
	}
	return 0
}

func (x *RoundData) GetMatchValue() float64 {
	if x != nil {
		return x.MatchValue
	}
	return 0
}

func (x *RoundData) GetGrantIds() []string {
	if x != nil {
		return x.GrantIds
	}
	return nil
}

func (x *RoundData) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *RoundData) GetDonatedTokens() []*TokenData {
	if x != nil {
		return x.DonatedTokens
	}
	return nil
}

func (x *RoundData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *RoundData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type TransferData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ProjectType string                 `protobuf:"bytes,2,opt,name=project_type,json=projectType,proto3" json:"project_type,omitempty"`
	RoundId     int32                  `protobuf:"varint,3,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	SeasonId    int32                  `protobuf:"varint,4,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	From        string                 `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	To          string                 `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	Memo        string                 `protobuf:"bytes,7,opt,name=memo,proto3" json:"memo,omitempty"`
	Fee         string                 `protobuf:"bytes,8,opt,name=fee,proto3" json:"fee,omitempty"`
	Value       float64                `protobuf:"fixed64,9,opt,name=value,proto3" json:"value,omitempty"`
	ExtQuantity *TokenData             `protobuf:"bytes,10,opt,name=ext_quantity,json=extQuantity,proto3" json:"ext_quantity,omitempty"`
	TransferId  int32                  `protobuf:"varint,11,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	TrxId       []byte                 `protobuf:"bytes,12,opt,name=trx_id,json=trxId,proto3" json:"trx_id,omitempty"`
	UserId      string                 `protobuf:"bytes,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *TransferData) Reset() {
	*x = TransferData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pomelo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferData) ProtoMessage() {}

func (x *TransferData) ProtoReflect() protoreflect.Message {
	mi := &file_pomelo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferData.ProtoReflect.Descriptor instead.
func (*TransferData) Descriptor() ([]byte, []int) {
	return file_pomelo_proto_rawDescGZIP(), []int{7}
}

func (x *TransferData) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *TransferData) GetProjectType() string {
	if x != nil {
		return x.ProjectType
	}
	return ""
}

func (x *TransferData) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *TransferData) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *TransferData) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TransferData) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TransferData) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *TransferData) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *TransferData) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TransferData) GetExtQuantity() *TokenData {
	if x != nil {
		return x.ExtQuantity
	}
	return nil
}

func (x *TransferData) GetTransferId() int32 {
	if x != nil {
		return x.TransferId
	}
	return 0
}

func (x *TransferData) GetTrxId() []byte {
	if x != nil {
		return x.TrxId
	}
	return nil
}

func (x *TransferData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TransferData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type GetLastTradingPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id TraidingPairId `protobuf:"varint,1,opt,name=id,proto3,enum=eosn.protobuf.v1.TraidingPairId" json:"id,omitempty"`
}

func (x *GetLastTradingPairRequest) Reset() {
	*x = GetLastTradingPairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pomelo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastTradingPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastTradingPairRequest) ProtoMessage() {}

func (x *GetLastTradingPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pomelo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastTradingPairRequest.ProtoReflect.Descriptor instead.
func (*GetLastTradingPairRequest) Descriptor() ([]byte, []int) {
	return file_pomelo_proto_rawDescGZIP(), []int{8}
}

func (x *GetLastTradingPairRequest) GetId() TraidingPairId {
	if x != nil {
		return x.Id
	}
	return TraidingPairId_EOSUSDPAIR
}

var File_pomelo_proto protoreflect.FileDescriptor

var file_pomelo_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x6f, 0x6d, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x65, 0x6f, 0x73, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x01, 0x0a,
	0x0c, 0x54, 0x72, 0x61, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x3f, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x73,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x65, 0x6f, 0x73, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0xeb, 0x01, 0x0a, 0x0c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6f,
	0x73, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3a, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6f, 0x73, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a,
	0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6f, 0x73, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x95, 0x02, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x65, 0x6f, 0x73, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x49, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8a, 0x02, 0x0a,
	0x09, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x5f,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x75, 0x6d,
	0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x6d, 0x5f, 0x73, 0x71, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x53, 0x71, 0x72, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xaf, 0x03, 0x0a, 0x09, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x73, 0x75, 0x6d, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x75, 0x6d, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x73, 0x75, 0x6d, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x73, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6f, 0x73, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb4, 0x03, 0x0a, 0x0c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x5f, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65,
	0x6f, 0x73, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x72, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x72, 0x78, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x4d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x6f,
	0x73, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x2a, 0x20, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69,
	0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4f, 0x53, 0x55, 0x53, 0x44, 0x50, 0x41, 0x49,
	0x52, 0x10, 0x00, 0x32, 0xe3, 0x02, 0x0a, 0x15, 0x50, 0x6f, 0x6d, 0x65, 0x6c, 0x6f, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x69, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x2b, 0x2e, 0x65, 0x6f, 0x73, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69,
	0x72, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x69, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12,
	0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pomelo_proto_rawDescOnce sync.Once
	file_pomelo_proto_rawDescData = file_pomelo_proto_rawDesc
)

func file_pomelo_proto_rawDescGZIP() []byte {
	file_pomelo_proto_rawDescOnce.Do(func() {
		file_pomelo_proto_rawDescData = protoimpl.X.CompressGZIP(file_pomelo_proto_rawDescData)
	})
	return file_pomelo_proto_rawDescData
}

var file_pomelo_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pomelo_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_pomelo_proto_goTypes = []interface{}{
	(TraidingPairId)(0),               // 0: eosn.protobuf.v1.TraidingPairId
	(*TraidingPair)(nil),              // 1: eosn.protobuf.v1.TraidingPair
	(*Contribution)(nil),              // 2: eosn.protobuf.v1.Contribution
	(*MatchingData)(nil),              // 3: eosn.protobuf.v1.MatchingData
	(*UserData)(nil),                  // 4: eosn.protobuf.v1.UserData
	(*UserGrantContributions)(nil),    // 5: eosn.protobuf.v1.UserGrantContributions
	(*GrantData)(nil),                 // 6: eosn.protobuf.v1.GrantData
	(*RoundData)(nil),                 // 7: eosn.protobuf.v1.RoundData
	(*TransferData)(nil),              // 8: eosn.protobuf.v1.TransferData
	(*GetLastTradingPairRequest)(nil), // 9: eosn.protobuf.v1.GetLastTradingPairRequest
	(*Transaction)(nil),               // 10: eosn.protobuf.v1.Transaction
	(*timestamppb.Timestamp)(nil),     // 11: google.protobuf.Timestamp
	(*TokenData)(nil),                 // 12: eosn.protobuf.v1.TokenData
	(*emptypb.Empty)(nil),             // 13: google.protobuf.Empty
}
var file_pomelo_proto_depIdxs = []int32{
	10, // 0: eosn.protobuf.v1.TraidingPair.transaction:type_name -> eosn.protobuf.v1.Transaction
	0,  // 1: eosn.protobuf.v1.TraidingPair.id:type_name -> eosn.protobuf.v1.TraidingPairId
	11, // 2: eosn.protobuf.v1.TraidingPair.time:type_name -> google.protobuf.Timestamp
	10, // 3: eosn.protobuf.v1.Contribution.transaction:type_name -> eosn.protobuf.v1.Transaction
	8,  // 4: eosn.protobuf.v1.Contribution.transfer_data:type_name -> eosn.protobuf.v1.TransferData
	4,  // 5: eosn.protobuf.v1.MatchingData.user_data:type_name -> eosn.protobuf.v1.UserData
	6,  // 6: eosn.protobuf.v1.MatchingData.grant_data:type_name -> eosn.protobuf.v1.GrantData
	7,  // 7: eosn.protobuf.v1.MatchingData.round_data:type_name -> eosn.protobuf.v1.RoundData
	5,  // 8: eosn.protobuf.v1.UserData.contributions:type_name -> eosn.protobuf.v1.UserGrantContributions
	11, // 9: eosn.protobuf.v1.UserData.updated_at:type_name -> google.protobuf.Timestamp
	11, // 10: eosn.protobuf.v1.GrantData.updated_at:type_name -> google.protobuf.Timestamp
	12, // 11: eosn.protobuf.v1.RoundData.donated_tokens:type_name -> eosn.protobuf.v1.TokenData
	11, // 12: eosn.protobuf.v1.RoundData.updated_at:type_name -> google.protobuf.Timestamp
	11, // 13: eosn.protobuf.v1.RoundData.created_at:type_name -> google.protobuf.Timestamp
	12, // 14: eosn.protobuf.v1.TransferData.ext_quantity:type_name -> eosn.protobuf.v1.TokenData
	11, // 15: eosn.protobuf.v1.TransferData.created_at:type_name -> google.protobuf.Timestamp
	0,  // 16: eosn.protobuf.v1.GetLastTradingPairRequest.id:type_name -> eosn.protobuf.v1.TraidingPairId
	9,  // 17: eosn.protobuf.v1.PomeloInternalService.GetLastTraidingPair:input_type -> eosn.protobuf.v1.GetLastTradingPairRequest
	1,  // 18: eosn.protobuf.v1.PomeloInternalService.AddTraidingPair:input_type -> eosn.protobuf.v1.TraidingPair
	2,  // 19: eosn.protobuf.v1.PomeloInternalService.AddContribution:input_type -> eosn.protobuf.v1.Contribution
	3,  // 20: eosn.protobuf.v1.PomeloInternalService.UpdateMatching:input_type -> eosn.protobuf.v1.MatchingData
	1,  // 21: eosn.protobuf.v1.PomeloInternalService.GetLastTraidingPair:output_type -> eosn.protobuf.v1.TraidingPair
	13, // 22: eosn.protobuf.v1.PomeloInternalService.AddTraidingPair:output_type -> google.protobuf.Empty
	13, // 23: eosn.protobuf.v1.PomeloInternalService.AddContribution:output_type -> google.protobuf.Empty
	13, // 24: eosn.protobuf.v1.PomeloInternalService.UpdateMatching:output_type -> google.protobuf.Empty
	21, // [21:25] is the sub-list for method output_type
	17, // [17:21] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_pomelo_proto_init() }
func file_pomelo_proto_init() {
	if File_pomelo_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pomelo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraidingPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pomelo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pomelo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pomelo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pomelo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGrantContributions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pomelo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pomelo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pomelo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pomelo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastTradingPairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pomelo_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pomelo_proto_goTypes,
		DependencyIndexes: file_pomelo_proto_depIdxs,
		EnumInfos:         file_pomelo_proto_enumTypes,
		MessageInfos:      file_pomelo_proto_msgTypes,
	}.Build()
	File_pomelo_proto = out.File
	file_pomelo_proto_rawDesc = nil
	file_pomelo_proto_goTypes = nil
	file_pomelo_proto_depIdxs = nil
}
